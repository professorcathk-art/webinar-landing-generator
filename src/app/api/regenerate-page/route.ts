import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { submissionId } = body
    
    // Get authenticated user from token
    const token = request.cookies.get('auth-token')?.value
    
    if (!token) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      )
    }

    // Verify JWT token and get user ID
    const { verify } = await import('jsonwebtoken')
    const decoded = verify(token, process.env.NEXTAUTH_SECRET || 'fallback-secret') as any
    
    if (!decoded || !decoded.userId) {
      return NextResponse.json(
        { success: false, error: 'Invalid authentication' },
        { status: 401 }
      )
    }

    // Get the form submission
    const submission = await prisma.formSubmission.findFirst({
      where: { 
        id: submissionId,
        userId: decoded.userId 
      }
    })

    if (!submission) {
      return NextResponse.json(
        { success: false, error: 'Form submission not found' },
        { status: 404 }
      )
    }

    // Create a new landing page using the submission data
    const landingPage = await prisma.landingPage.create({
      data: {
        title: `${submission.businessInfo} - Webinar Landing Page`,
        slug: `webinar-${Date.now()}`,
        content: {
          businessInfo: submission.businessInfo,
          webinarContent: submission.webinarContent,
          targetAudience: submission.targetAudience,
          webinarInfo: submission.webinarInfo,
          instructorCreds: submission.instructorCreds,
          contactFields: submission.contactFields,
          style: submission.style,
          brandColors: submission.brandColors,
          uniqueSellingPoints: submission.uniqueSellingPoints,
          upsellProducts: submission.upsellProducts,
          specialRequirements: submission.specialRequirements,
        },
        htmlContent: '', // Will be generated by the main API
        cssContent: '',
        jsContent: '',
        userId: decoded.userId,
      },
    })

    // Update the submission with the new landing page ID
    await prisma.formSubmission.update({
      where: { id: submissionId },
      data: { landingPageId: landingPage.id }
    })

    // Trigger the page generation process
    // In a real implementation, you might want to queue this as a background job
    try {
      const generateResponse = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/generate-landing-page`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cookie': `auth-token=${token}`
        },
        body: JSON.stringify({
          businessInfo: submission.businessInfo,
          webinarContent: submission.webinarContent,
          targetAudience: submission.targetAudience,
          webinarInfo: submission.webinarInfo,
          instructorCreds: submission.instructorCreds,
          contactFields: submission.contactFields,
          style: submission.style,
          brandColors: submission.brandColors,
          uniqueSellingPoints: submission.uniqueSellingPoints,
          upsellProducts: submission.upsellProducts,
          specialRequirements: submission.specialRequirements,
        })
      })

      if (!generateResponse.ok) {
        throw new Error('Failed to generate landing page')
      }
    } catch (error) {
      console.error('Error triggering page generation:', error)
      // Continue anyway - the page will be created but might need manual generation
    }

    return NextResponse.json({
      success: true,
      pageId: landingPage.id,
      message: 'Landing page regeneration started'
    })

  } catch (error) {
    console.error('Error regenerating page:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to regenerate page' },
      { status: 500 }
    )
  }
}
